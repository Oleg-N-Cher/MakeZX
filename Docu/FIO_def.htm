<!--
This file was generated by Web C Plus Plus software v0.7.9
Webcpp Copyright (C)2001, (C)2002 Jeffrey Bakker under the GNU GPL
Get webcpp at http://webcpp.sf.net
-->

<html>
<head>
<title>FIO.def</title>
<style type="text/css">

/** Webcpp v0.7.0+ compatible StyleSheet http://webcpp.sf.net **/
/** Theme: typical **/

body
{
background-color: #ffffff
}

a:link    {color:#ff0000}
a:visited {color:#666666}
a:active  {color:#0000ff}
a:hover   {color:#00b800}

pre
{
color: #000000
}

font
{
font-size:100%
}

font.preproc
{
color: #00b800
}

font.numbers
{
color: #a900a9
}

font.strings
{
color: #ff0000
}

font.keyword
{
color: #0000ff;
font-weight: bold
}

font.comment
{
color: #666666;
font-style: italic
}

</style>
</head>
<body>
<pre>

<font CLASS=keyword>DEFINITION</font> <font CLASS=keyword>MODULE</font> FIO ;

<font CLASS=comment>(*
    System     : UNIX (gm2)
    Description: provides a simple buffered file input/output library.
<font CLASS=comment>*)</font></font>


<font CLASS=keyword>FROM</font> SYSTEM <font CLASS=keyword>IMPORT</font> ADDRESS, BYTE ;

<font CLASS=keyword>EXPORT</font> <font CLASS=keyword>QUALIFIED</font> <font CLASS=comment>(* types *)</font>
                 File,
                 <font CLASS=comment>(* procedures *)</font>
                 OpenToRead, OpenToWrite, OpenForRandom, Close,
                 EOF, EOLN, IsNoError, Exists,
                 SetPositionFromBeginning, FindPosition, <font CLASS=comment>(* Rewind, *)</font>
                 ReadChar, ReadString, <font CLASS=comment>(* ReadLine, *)</font>
                 WriteChar, WriteString, WriteLine,
                 WriteCardinal, ReadCardinal,
                 <font CLASS=comment>(* WriteShort, ReadShort, *)</font>
                 UnReadChar,
                 WriteNBytes, ReadNBytes, <font CLASS=comment>(* WriteBase, *)</font>
                 GetUnixFileDescriptor,
                 <font CLASS=comment>(* variables *)</font>
                 StdIn, StdOut, StdErr ;

<font CLASS=keyword>TYPE</font>
   File = <font CLASS=keyword>CARDINAL</font> ;

<font CLASS=comment>(* the following variables are initialized to their UNIX equivalents *)</font>
<font CLASS=keyword>VAR</font>
   StdIn, StdOut, StdErr: File ;

 

<font CLASS=comment>(*
   IsNoError - returns a TRUE if no error has occured on file, f.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> IsNoError (f: File) : <font CLASS=keyword>BOOLEAN</font> ;


<font CLASS=comment>(*
   Exists - returns TRUE if a file named, fname exists for reading.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> Exists (fname: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> <font CLASS=keyword>CHAR</font>) : <font CLASS=keyword>BOOLEAN</font> ;


<font CLASS=comment>(*
   OpenToRead - attempts to open a file, fname, for reading and
                it returns this file.
                The success of this operation can be checked by
                calling IsNoError.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> OpenToRead (fname: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> <font CLASS=keyword>CHAR</font>) : File ;


<font CLASS=comment>(*
   OpenToWrite - attempts to open a file, fname, for write and
                 it returns this file.
                 The success of this operation can be checked by
                 calling IsNoError.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> OpenToWrite (fname: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> <font CLASS=keyword>CHAR</font>) : File ;


<font CLASS=comment>(*
   OpenForRandom - attempts to open a file, fname, for random access
                   read or write and it returns this file.
                   The success of this operation can be checked by
                   calling IsNoError.
                   towrite, determines whether the file should be
                   opened for writing or reading.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> OpenForRandom (fname: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> <font CLASS=keyword>CHAR</font>; towrite: <font CLASS=keyword>BOOLEAN</font>) : File ;


<font CLASS=comment>(*
   Close - close a file which has been previously opened using:
           OpenToRead, OpenToWrite, OpenForRandom.
           It is correct to close a file which has an error status.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> Close (f: File) ;


<font CLASS=comment>(*
   ReadNBytes - reads nBytes of a file into memory area, a, returning
                the number of bytes actually read.
                This function will consume from the buffer and then
                perform direct libc reads. It is ideal for large reads.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> ReadNBytes (f: File; nBytes: <font CLASS=keyword>CARDINAL</font>; a: ADDRESS) : <font CLASS=keyword>CARDINAL</font> ;


<font CLASS=comment>(*
   ReadAny - reads HIGH(a) bytes into, a. All input
             is fully buffered, unlike ReadNBytes and thus is more
             suited to small reads.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> ReadAny (f: File; <font CLASS=keyword>VAR</font> a: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> BYTE) ;


<font CLASS=comment>(*
   WriteNBytes - writes nBytes of a file into memory area, a, returning
                 the number of bytes actually written.
                 This function will flush the buffer and then
                 write the nBytes using a direct write from libc.
                 It is ideal for large writes.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> WriteNBytes (f: File; nBytes: <font CLASS=keyword>CARDINAL</font>; a: ADDRESS) : <font CLASS=keyword>CARDINAL</font> ;


<font CLASS=comment>(*
   WriteAny - writes HIGH(a) bytes onto, file, f. All output
              is fully buffered, unlike WriteNBytes and thus is more
              suited to small writes.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> WriteAny (f: File; <font CLASS=keyword>VAR</font> a: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> BYTE) ;


<font CLASS=comment>(*
   WriteChar - writes a single character to file, f.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> WriteChar (f: File; ch: <font CLASS=keyword>CHAR</font>) ;


<font CLASS=comment>(*
   EOF - tests to see whether a file, f, has reached end of file.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> EOF (f: File) : <font CLASS=keyword>BOOLEAN</font> ;


<font CLASS=comment>(*
   EOLN - tests to see whether a file, f, is upon a newline.
          It does NOT consume the newline.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> EOLN (f: File) : <font CLASS=keyword>BOOLEAN</font> ;


<font CLASS=comment>(*
   ReadChar - returns a character read from file, f.
              Sensible to check with IsNoError or EOF after calling
              this function.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> ReadChar (f: File) : <font CLASS=keyword>CHAR</font> ;


<font CLASS=comment>(*
   UnReadChar - replaces a character, ch, back into file, f.
                This character must have been read by ReadChar
                and it does not allow successive calls.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> UnReadChar (f: File ; ch: <font CLASS=keyword>CHAR</font>) ;


<font CLASS=comment>(*
   WriteLine - writes out a linefeed to file, f.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> WriteLine (f: File) ;


<font CLASS=comment>(*
   WriteString - writes a string to file, f.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> WriteString (f: File; a: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> <font CLASS=keyword>CHAR</font>) ;


<font CLASS=comment>(*
   ReadString - reads a string from file, f, into string, a.
                It terminates the string if HIGH is reached or
                if a newline is seen or an error occurs.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> ReadString (f: File; <font CLASS=keyword>VAR</font> a: <font CLASS=keyword>ARRAY</font> <font CLASS=keyword>OF</font> <font CLASS=keyword>CHAR</font>) ;


<font CLASS=comment>(*
   WriteCardinal - writes a CARDINAL to file, f.
                   (Suggest that WriteAny be used instead - here for compatibility)
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> WriteCardinal (f: File; c: <font CLASS=keyword>CARDINAL</font>) ;


<font CLASS=comment>(*
   ReadCardinal - reads a CARDINAL from file, f.
                  (Suggest that ReadAny be used instead - here for compatibility)
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> ReadCardinal (f: File) : <font CLASS=keyword>CARDINAL</font> ;


<font CLASS=comment>(*
   GetUnixFileDescriptor - returns the UNIX file descriptor of a file.
                           Useful when combining FIO.mod with select
                           (in Selective.def - but note the comments in
                            Selective about using read/write primatives)
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> GetUnixFileDescriptor (f: File) : <font CLASS=keyword>INTEGER</font> ;


<font CLASS=comment>(*
   SetPositionFromBeginning - sets the position from the beginning of the file.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> SetPositionFromBeginning (f: File; pos: <font CLASS=keyword>CARDINAL</font>) ;


<font CLASS=comment>(*
   FindPosition - returns the current absolute position in file, f.
<font CLASS=comment>*)</font></font>

<font CLASS=keyword>PROCEDURE</font> FindPosition (f: File) : <font CLASS=keyword>CARDINAL</font> ;


<font CLASS=keyword>END</font> FIO.



</pre>



</body>
</html>
